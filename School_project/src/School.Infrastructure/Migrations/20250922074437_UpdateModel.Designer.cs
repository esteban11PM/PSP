// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Infrastructure.Persistence;

#nullable disable

namespace School.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20250922074437_UpdateModel")]
    partial class UpdateModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("School.Domain.Entities.AssessmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SubjectOfferingId")
                        .HasColumnType("int");

                    b.Property<byte>("Weight")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("SubjectOfferingId", "Name")
                        .IsUnique();

                    b.ToTable("AssessmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Parcial",
                            SubjectOfferingId = 1,
                            Weight = (byte)40
                        },
                        new
                        {
                            Id = 2,
                            Name = "Taller",
                            SubjectOfferingId = 1,
                            Weight = (byte)30
                        },
                        new
                        {
                            Id = 3,
                            Name = "Examen",
                            SubjectOfferingId = 1,
                            Weight = (byte)30
                        },
                        new
                        {
                            Id = 4,
                            Name = "Parcial",
                            SubjectOfferingId = 2,
                            Weight = (byte)40
                        },
                        new
                        {
                            Id = 5,
                            Name = "Taller",
                            SubjectOfferingId = 2,
                            Weight = (byte)30
                        },
                        new
                        {
                            Id = 6,
                            Name = "Examen",
                            SubjectOfferingId = 2,
                            Weight = (byte)30
                        });
                });

            modelBuilder.Entity("School.Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FinalAverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectOfferingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectOfferingId");

                    b.HasIndex("StudentId", "SubjectOfferingId")
                        .IsUnique();

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnrolledAt = new DateTime(2025, 2, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            FinalAverage = 4.00m,
                            StudentId = 1,
                            SubjectOfferingId = 1
                        },
                        new
                        {
                            Id = 2,
                            EnrolledAt = new DateTime(2025, 2, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            FinalAverage = 3.50m,
                            StudentId = 2,
                            SubjectOfferingId = 1
                        },
                        new
                        {
                            Id = 3,
                            EnrolledAt = new DateTime(2025, 2, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            FinalAverage = 4.44m,
                            StudentId = 3,
                            SubjectOfferingId = 1
                        },
                        new
                        {
                            Id = 4,
                            EnrolledAt = new DateTime(2025, 2, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            FinalAverage = 4.18m,
                            StudentId = 1,
                            SubjectOfferingId = 2
                        },
                        new
                        {
                            Id = 5,
                            EnrolledAt = new DateTime(2025, 2, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            FinalAverage = 3.39m,
                            StudentId = 2,
                            SubjectOfferingId = 2
                        });
                });

            modelBuilder.Entity("School.Domain.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GradedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Score")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("EnrollmentId", "AssessmentTypeId")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentTypeId = 1,
                            EnrollmentId = 1,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 4.00m
                        },
                        new
                        {
                            Id = 2,
                            AssessmentTypeId = 2,
                            EnrollmentId = 1,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 4.20m
                        },
                        new
                        {
                            Id = 3,
                            AssessmentTypeId = 3,
                            EnrollmentId = 1,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 3.80m
                        },
                        new
                        {
                            Id = 4,
                            AssessmentTypeId = 1,
                            EnrollmentId = 2,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 3.50m
                        },
                        new
                        {
                            Id = 5,
                            AssessmentTypeId = 2,
                            EnrollmentId = 2,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 4.00m
                        },
                        new
                        {
                            Id = 6,
                            AssessmentTypeId = 3,
                            EnrollmentId = 2,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 3.00m
                        },
                        new
                        {
                            Id = 7,
                            AssessmentTypeId = 1,
                            EnrollmentId = 3,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 4.50m
                        },
                        new
                        {
                            Id = 8,
                            AssessmentTypeId = 2,
                            EnrollmentId = 3,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 4.80m
                        },
                        new
                        {
                            Id = 9,
                            AssessmentTypeId = 3,
                            EnrollmentId = 3,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 4.00m
                        },
                        new
                        {
                            Id = 10,
                            AssessmentTypeId = 4,
                            EnrollmentId = 4,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 4.30m
                        },
                        new
                        {
                            Id = 11,
                            AssessmentTypeId = 5,
                            EnrollmentId = 4,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 4.00m
                        },
                        new
                        {
                            Id = 12,
                            AssessmentTypeId = 6,
                            EnrollmentId = 4,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 4.20m
                        },
                        new
                        {
                            Id = 13,
                            AssessmentTypeId = 4,
                            EnrollmentId = 5,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 3.00m
                        },
                        new
                        {
                            Id = 14,
                            AssessmentTypeId = 5,
                            EnrollmentId = 5,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 3.50m
                        },
                        new
                        {
                            Id = 15,
                            AssessmentTypeId = 6,
                            EnrollmentId = 5,
                            GradedAt = new DateTime(2025, 4, 15, 15, 30, 0, 0, DateTimeKind.Utc),
                            Score = 3.80m
                        });
                });

            modelBuilder.Entity("School.Domain.Entities.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Open");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Periods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "2025-P1",
                            StartDate = new DateTime(2025, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Open"
                        });
                });

            modelBuilder.Entity("School.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentNumber")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 12, 12, 0, 0, 0, DateTimeKind.Utc),
                            DocumentNumber = "S-2001",
                            Email = "esteban.palomar@colegio.test",
                            FirstName = "Esteban",
                            LastName = "Palomar",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 12, 12, 0, 0, 0, DateTimeKind.Utc),
                            DocumentNumber = "S-2002",
                            Email = "maria.gomez@colegio.test",
                            FirstName = "María",
                            LastName = "Gómez",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 12, 12, 0, 0, 0, DateTimeKind.Utc),
                            DocumentNumber = "S-2003",
                            Email = "luis.ortega@colegio.test",
                            FirstName = "Luis",
                            LastName = "Ortega",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 12, 12, 0, 0, 0, DateTimeKind.Utc),
                            DocumentNumber = "S-2004",
                            Email = "sara.bermudez@colegio.test",
                            FirstName = "Sara",
                            LastName = "Bermúdez",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 12, 12, 0, 0, 0, DateTimeKind.Utc),
                            DocumentNumber = "S-2005",
                            Email = "ivan.rojas@colegio.test",
                            FirstName = "Iván",
                            LastName = "Rojas",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("School.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte?>("WeeklyHours")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "MAT101",
                            Name = "Matemáticas",
                            WeeklyHours = (byte)4
                        },
                        new
                        {
                            Id = 2,
                            Code = "LEN201",
                            Name = "Lengua",
                            WeeklyHours = (byte)3
                        },
                        new
                        {
                            Id = 3,
                            Code = "CIE301",
                            Name = "Ciencias",
                            WeeklyHours = (byte)3
                        });
                });

            modelBuilder.Entity("School.Domain.Entities.SubjectOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("SubjectId", "PeriodId")
                        .IsUnique();

                    b.ToTable("SubjectOfferings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsClosed = false,
                            PeriodId = 1,
                            SubjectId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsClosed = false,
                            PeriodId = 1,
                            SubjectId = 2,
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("School.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentNumber")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            DocumentNumber = "T-1001",
                            Email = "ana.ruiz@colegio.test",
                            FirstName = "Ana",
                            LastName = "Ruiz",
                            Specialty = "Matemáticas",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            DocumentNumber = "T-1002",
                            Email = "carlos.mejia@colegio.test",
                            FirstName = "Carlos",
                            LastName = "Mejía",
                            Specialty = "Lengua",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("School.Domain.Entities.AssessmentType", b =>
                {
                    b.HasOne("School.Domain.Entities.SubjectOffering", "SubjectOffering")
                        .WithMany("AssessmentTypes")
                        .HasForeignKey("SubjectOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectOffering");
                });

            modelBuilder.Entity("School.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("School.Domain.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Domain.Entities.SubjectOffering", "SubjectOffering")
                        .WithMany("Enrollments")
                        .HasForeignKey("SubjectOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubjectOffering");
                });

            modelBuilder.Entity("School.Domain.Entities.Grade", b =>
                {
                    b.HasOne("School.Domain.Entities.AssessmentType", "AssessmentType")
                        .WithMany("Grades")
                        .HasForeignKey("AssessmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Domain.Entities.Enrollment", "Enrollment")
                        .WithMany("Grades")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssessmentType");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("School.Domain.Entities.SubjectOffering", b =>
                {
                    b.HasOne("School.Domain.Entities.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.Domain.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Period");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("School.Domain.Entities.AssessmentType", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("School.Domain.Entities.Enrollment", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("School.Domain.Entities.Student", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("School.Domain.Entities.SubjectOffering", b =>
                {
                    b.Navigation("AssessmentTypes");

                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
